import groovy.json.JsonBuilder

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "com.google.guava:guava:17.0"
        classpath "com.tkruse.gradle:gradle-groovysh-plugin:1.0.4"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.1.1'
        classpath 'org.yaml:snakeyaml:1.14'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'codenarc'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'
apply plugin: 'com.github.tkruse.groovysh'

def buildNumber() {
    def buildNum = '0'
    if (hasProperty('buildNumber')) {
        buildNum = buildNumber
    }
    buildNum
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = "0.1.${buildNumber()}"

// Project details
group = "au.com.dius"
mainClassName = "au.com.dius.service.StencilService"
description = "Stencil Service"

def configuration = "conf/stencil-service.yml"

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.1:indy'
    compile "io.dropwizard:dropwizard-core:${dropwizardVersion}"
    compile "io.dropwizard:dropwizard-hibernate:${dropwizardVersion}"
    compile 'com.hubspot.dropwizard:dropwizard-guice:0.7.2'
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jacksonVersion}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    compile 'com.xeiam:sundial:1.1.3'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'org.apache.poi:poi-ooxml:3.11'
    compile 'org.ostermiller:utils:1.07.00'
    compile 'org.apache.poi:poi-ooxml-schemas:3.11'
    compile 'org.apache.poi:ooxml-schemas:1.1'
    compile 'net.sf.opencsv:opencsv:2.3'

    testCompile "io.dropwizard:dropwizard-testing:${dropwizardVersion}"
    testCompile "junit:junit:4.11"
    testCompile "org.mockito:mockito-core:1.9.5"
    testCompile "au.com.dius:pact-jvm-consumer-groovy_2.10:${pactJvmVersion}"
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'au.com.ioof.asis.authenticator:jws-test-rule:1.1.1'
    testCompile 'com.cyrusinnovation:mockito-groovy-support:1.3'
}

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
}

checkstyleMain {
    classpath += configurations.compile
}

//compile the java classes with the groovy compiler which cross compiles both
sourceSets.main.groovy.srcDirs += ["src/main/java"]

jar {
    manifest {
        attributes("Implementation-Title": 'Stencil Service',
                "Implementation-Version": version,
                "Class-Path": (configurations.compile + configurations.runtime).collect { it.getName() }.join(' ') ,
                "Main-Class": mainClassName
        )
    }
}

shadowJar {
    mergeServiceFiles()
}

publishing {
    publications {
        shadow(MavenPublication) {
            from components.java
            artifact shadowJar
        }
    }
}

build.dependsOn shadowJar

test {
    if (project.hasProperty("dropwizardTestConfig")) {
        systemProperties["dropwizard.test.config"] = dropwizardTestConfig
    }
}

runShadow {
    args 'server', 'conf/stencil-service.yml'
}

task preCommit(dependsOn: ['check', 'test', 'jacocoTestReport', 'codeCoverage']) {
    description 'Runs all pre-commit checks. Must be run before pushing.'
}

check.dependsOn.remove(test)

groovysh {

    // groovyVersion determines the features of the shell and buildShell tasks
    groovyVersion = '2.4.1'

    shell {
        jvmArgs = ['-noverify']
        sourceSetName = 'test'
        extraClasspath = configurations.runtime.asFileTree
    }
}

task generateInfo {
    mustRunAfter 'processResources'
    jar.dependsOn it
    shadowJar.dependsOn it
    ext.destFile = file('build/resources/main/info.json')
    doLast {
        def origin = 'git config --get remote.origin.url'.execute()
        def branch = 'git rev-parse --abbrev-ref HEAD'.execute()
        def rev = 'git rev-parse HEAD'.execute()
        origin.waitFor()
        branch.waitFor()
        rev.waitFor()
        destFile.write(new JsonBuilder([
                name: project.name,
                version: project.version,
                description: project.description,
                'build-time': new Date().format("yyyy-MM-dd HH:mm:ss"),
                'build-number': buildNumber(),
                'vcs-url': origin.text.trim(),
                'vcs-revision': rev.text.trim(),
                'vcs-branch': branch.text.trim(),
                'build-url': ''
        ]).toPrettyString())
    }
}

import javax.xml.parsers.SAXParserFactory
import org.gradle.logging.StyledTextOutputFactory
import org.gradle.logging.StyledTextOutput
import static org.gradle.logging.StyledTextOutput.Style
task codeCoverage {
    ext.coverageReport = file('build/reports/jacoco/test/html/index.html')
    dependsOn jacocoTestReport
    description 'report the code coverage'

    doLast {
        def spf = SAXParserFactory.newInstance()
        spf.setFeature('http://apache.org/xml/features/disallow-doctype-decl', false)
        spf.setFeature('http://apache.org/xml/features/nonvalidating/load-external-dtd', false)
        def saxParser = spf.newSAXParser()
        def slurper = new XmlSlurper(saxParser)
        def html = slurper.parse(coverageReport)
        def coverage = html.'**'.grep{ it.@id == 'coveragetable' }.tfoot.tr.td[0][2].text()

        def coverageCi = coverage

        def coverageMovement = ''
        int coverageAsint = coverage.replaceAll('[^0-9]', '') as Integer
        int coverageCiAsint = coverageCi.replaceAll('[^0-9]', '') as Integer
        if (coverageAsint < coverageCiAsint) {
            coverageMovement = '↓'
        } else if (coverageAsint > coverageCiAsint) {
            coverageMovement = '↑'
        }

        StyledTextOutput out = services.get(StyledTextOutputFactory).create('codeCoverageCheck')
        def coverageStr = "Code coverage is at $coverage $coverageMovement".center(40)
        String s = '-' * 40
        out.println(s)
        out.withStyle(Style.Info).println(coverageStr)
        out.println(s)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

test {
    testLogging.showStandardStreams = true
}